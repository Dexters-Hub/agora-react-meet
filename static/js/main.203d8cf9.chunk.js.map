{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["console","log","process","APP_ID","appId","token","useClient","createClient","mode","codec","useMicrophoneAndCameraTracks","createMicrophoneAndCameraTracks","VideoCall","props","setInCall","channelName","useState","users","setUsers","start","setStart","client","ready","tracks","useEffect","init","name","a","on","user","mediaType","subscribe","prevUsers","audioTrack","play","type","stop","filter","User","uid","join","publish","className","Videos","id","videoTrack","length","map","Controls","video","audio","trackState","setTrackState","mute","setEnabled","ps","leaveChannel","leave","removeAllListeners","close","onClick","ChannelForm","setChannelName","style","color","placeholder","onChange","e","target","value","preventDefault","App","inCall","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAgBAA,QAAQC,IAAIC,8UAAYC,QACxB,IAAMC,EAAa,UAAMF,oCACnBG,EAAa,UAAMH,uHACnBI,EAAYC,YANW,CAC3BC,KAAM,MAAOC,MAAO,QAMhBC,EAA+BC,cAkB/BC,EAAY,SAACC,GAIjB,IAAQC,EAA2BD,EAA3BC,UAAWC,EAAgBF,EAAhBE,YACnB,EAA0BC,mBAAgC,IAA1D,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,oBAAkB,GAA5C,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAASf,IACf,EAA0BI,IAAlBY,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAoDf,OAjDAC,qBAAU,WAER,IAAIC,EAAI,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACTN,EAAOO,GAAG,iBAAV,uCAA4B,WAAOC,EAAMC,GAAb,eAAAH,EAAA,sEACpBN,EAAOU,UAAUF,EAAMC,GADH,OAE1B9B,QAAQC,IAAI,qBACM,UAAd6B,GACFZ,GAAS,SAACc,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBH,OAGR,UAAdC,IACF,UAAAD,EAAKI,kBAAL,SAAiBC,QATO,2CAA5B,yDAaAb,EAAOO,GAAG,oBAAoB,SAACC,EAAMM,GAEZ,IAAD,GADtBnC,QAAQC,IAAI,cAAe4B,EAAMM,GACpB,UAATA,KACF,UAAAN,EAAKI,kBAAL,SAAiBG,QAEN,UAATD,GACFjB,GAAS,SAACc,GACR,OAAOA,EAAUK,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQV,EAAKU,aAK1DlB,EAAOO,GAAG,aAAa,SAACC,GACtB7B,QAAQC,IAAI,UAAW4B,GACvBX,GAAS,SAACc,GACR,OAAOA,EAAUK,QAAO,SAACC,GAAD,OAAUA,EAAKC,MAAQV,EAAKU,aA7B/C,SAiCHlB,EAAOmB,KAAKpC,EAAOsB,EAAMrB,EAAO,MAjC7B,WAkCLkB,EAlCK,gCAkCSF,EAAOoB,QAAQ,CAAClB,EAAO,GAAIA,EAAO,KAlC3C,OAmCTH,GAAS,GAnCA,2CAAH,sDAuCJE,GAASC,IACXvB,QAAQC,IAAI,cACZwB,EAAKV,MAGN,CAACA,EAAaM,EAAQC,EAAOC,IAI9B,sBAAKmB,UAAU,MAAf,UACGpB,GAASC,GACR,cAAC,EAAD,CAAUA,OAAQA,EAAQH,SAAUA,EAAUN,UAAWA,IAE1DK,GAASI,GAAU,cAAC,EAAD,CAAQN,MAAOA,EAAOM,OAAQA,QAKlDoB,EAAS,SAAC9B,GAId,IAAQI,EAAkBJ,EAAlBI,MAAOM,EAAWV,EAAXU,OAEf,OACE,8BACE,sBAAKqB,GAAG,SAAR,UACE,cAAC,IAAD,CAAkBF,UAAU,MAAMG,WAAYtB,EAAO,KACpDN,EAAM6B,OAAS,GACd7B,EAAM8B,KAAI,SAAClB,GACT,OAAIA,EAAKgB,WAEL,cAAC,IAAD,CAAkBH,UAAU,MAAMG,WAAYhB,EAAKgB,YAAiBhB,EAAKU,KAE/D,cAObS,EAAW,SAACnC,GACvB,IAAMQ,EAASf,IACPiB,EAAgCV,EAAhCU,OAAQH,EAAwBP,EAAxBO,SAAUN,EAAcD,EAAdC,UAC1B,EAAoCE,mBAAS,CAAEiC,OAAO,EAAMC,OAAO,IAAnE,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAI,uCAAG,WAAOlB,GAAP,SAAAR,EAAA,yDACE,UAATQ,EADO,gCAEHZ,EAAO,GAAG+B,YAAYH,EAAWD,OAF9B,OAGTE,GAAc,SAACG,GACb,OAAO,2BAAKA,GAAZ,IAAgBL,OAAQK,EAAGL,WAJpB,0BAMS,UAATf,EANA,iCAOHZ,EAAO,GAAG+B,YAAYH,EAAWF,OAP9B,OAQTG,GAAc,SAACG,GACb,OAAO,2BAAKA,GAAZ,IAAgBN,OAAQM,EAAGN,WATpB,4CAAH,sDAcJO,EAAY,uCAAG,sBAAA7B,EAAA,sEACbN,EAAOoC,QADM,OAEnBpC,EAAOqC,qBACPnC,EAAO,GAAGoC,QACVpC,EAAO,GAAGoC,QACVvC,GAAS,GACTN,GAAU,GANS,2CAAH,qDASlB,OACE,sBAAK4B,UAAU,WAAf,UACE,mBAAGA,UAAWS,EAAWD,MAAQ,KAAO,GACtCU,QAAS,kBAAMP,EAAK,UADtB,SAEGF,EAAWD,MAAQ,YAAc,gBAEpC,mBAAGR,UAAWS,EAAWF,MAAQ,KAAO,GACtCW,QAAS,kBAAMP,EAAK,UADtB,SAEGF,EAAWF,MAAQ,YAAc,gBAEnC,mBAAGW,QAAS,kBAAMJ,KAAlB,uBAKDK,EAAc,SAAChD,GAInB,IAAQC,EAA8BD,EAA9BC,UAAWgD,EAAmBjD,EAAnBiD,eAEnB,OACE,uBAAMpB,UAAU,OAAhB,UACa,KAAVtC,GAAgB,mBAAG2D,MAAO,CAACC,MAAO,OAAlB,4EACjB,uBAAO7B,KAAK,OACV8B,YAAY,qBACZC,SAAU,SAACC,GAAD,OAAOL,EAAeK,EAAEC,OAAOC,UAE3C,wBAAQT,QAAS,SAACO,GAChBA,EAAEG,iBACFxD,GAAU,IAFZ,sBAUSyD,EA/KH,WACV,MAA4BvD,oBAAS,GAArC,mBAAOwD,EAAP,KAAe1D,EAAf,KACA,EAAsCE,mBAAS,IAA/C,mBAAOD,EAAP,KAAoB+C,EAApB,KACA,OACE,gCACE,oBAAIpB,UAAU,UAAd,8BACC8B,EACC,cAAC,EAAD,CAAW1D,UAAWA,EAAWC,YAAaA,IAE9C,cAAC,EAAD,CAAaD,UAAWA,EAAWgD,eAAgBA,QCjB5CW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.203d8cf9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ClientConfig,\n  IAgoraRTCRemoteUser,\n  ICameraVideoTrack,\n  IMicrophoneAudioTrack,\n} from \"agora-rtc-sdk-ng\";\nimport {\n  AgoraVideoPlayer,\n  createClient,\n  createMicrophoneAndCameraTracks,\n} from \"agora-rtc-react\";\n\nconst config: ClientConfig = { \n  mode: \"rtc\", codec: \"vp8\",\n};\nconsole.log(process.env.APP_ID);\nconst appId: string = `${process.env.REACT_APP_APP_ID}`; //ENTER APP ID HERE\nconst token: string = `${process.env.REACT_APP_TOKEN}`;\nconst useClient = createClient(config);\nconst useMicrophoneAndCameraTracks = createMicrophoneAndCameraTracks();\n\nconst App = () => {\n  const [inCall, setInCall] = useState(false);\n  const [channelName, setChannelName] = useState(\"\");\n  return (\n    <div>\n      <h1 className=\"heading\">Agora Video Meet</h1>\n      {inCall ? (\n        <VideoCall setInCall={setInCall} channelName={channelName} />\n      ) : (\n        <ChannelForm setInCall={setInCall} setChannelName={setChannelName} />\n      )}\n    </div>\n  );\n};\n\n\nconst VideoCall = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  channelName: string;\n}) => {\n  const { setInCall, channelName } = props;\n  const [users, setUsers] = useState<IAgoraRTCRemoteUser[]>([]);\n  const [start, setStart] = useState<boolean>(false);\n  const client = useClient();\n  const { ready, tracks } = useMicrophoneAndCameraTracks();\n\n\n  useEffect(() => {\n    // function to initialise the SDK\n    let init = async (name: string) => {\n      client.on(\"user-published\", async (user, mediaType) => {\n        await client.subscribe(user, mediaType);\n        console.log(\"subscribe success\");\n        if (mediaType === \"video\") {\n          setUsers((prevUsers) => {\n            return [...prevUsers, user];\n          });\n        }\n        if (mediaType === \"audio\") {\n          user.audioTrack?.play();\n        }\n      });\n\n      client.on(\"user-unpublished\", (user, type) => {\n        console.log(\"unpublished\", user, type);\n        if (type === \"audio\") {\n          user.audioTrack?.stop();\n        }\n        if (type === \"video\") {\n          setUsers((prevUsers) => {\n            return prevUsers.filter((User) => User.uid !== user.uid);\n          });\n        }\n      });\n\n      client.on(\"user-left\", (user) => {\n        console.log(\"leaving\", user);\n        setUsers((prevUsers) => {\n          return prevUsers.filter((User) => User.uid !== user.uid);\n        });\n      });\n\n      await client.join(appId, name, token, null);\n      if (tracks) await client.publish([tracks[0], tracks[1]]);\n      setStart(true);\n\n    };\n\n    if (ready && tracks) {\n      console.log(\"init ready\");\n      init(channelName);\n    }\n\n  }, [channelName, client, ready, tracks]);\n\n\n  return (\n    <div className=\"App\">\n      {ready && tracks && (\n        <Controls tracks={tracks} setStart={setStart} setInCall={setInCall} />\n      )}\n      {start && tracks && <Videos users={users} tracks={tracks} />}\n    </div>\n  );\n};\n\nconst Videos = (props: {\n  users: IAgoraRTCRemoteUser[];\n  tracks: [IMicrophoneAudioTrack, ICameraVideoTrack];\n}) => {\n  const { users, tracks } = props;\n\n  return (\n    <div>\n      <div id=\"videos\">\n        <AgoraVideoPlayer className='vid' videoTrack={tracks[1]} />\n        {users.length > 0 &&\n          users.map((user) => {\n            if (user.videoTrack) {\n              return (\n                <AgoraVideoPlayer className='vid' videoTrack={user.videoTrack} key={user.uid} />\n              );\n            } else return null;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport const Controls = (props: {tracks: any, setStart: any, setInCall: any}) => {\n  const client = useClient();\n  const { tracks, setStart, setInCall } = props;\n  const [trackState, setTrackState] = useState({ video: true, audio: true });\n  \n  const mute = async (type: \"audio\" | \"video\") => {\n    if (type === \"audio\") {\n      await tracks[0].setEnabled(!trackState.audio);\n      setTrackState((ps) => {\n        return { ...ps, audio: !ps.audio };\n      });\n    } else if (type === \"video\") {\n      await tracks[1].setEnabled(!trackState.video);\n      setTrackState((ps) => {\n        return { ...ps, video: !ps.video };\n      });\n    }\n  };\n  \n  const leaveChannel = async () => {\n    await client.leave();\n    client.removeAllListeners();\n    tracks[0].close();\n    tracks[1].close();\n    setStart(false);\n    setInCall(false);\n  };\n\n  return (\n    <div className=\"controls\">\n      <p className={trackState.audio ? \"on\" : \"\"}\n        onClick={() => mute(\"audio\")}>\n        {trackState.audio ? \"MuteAudio\" : \"UnmuteAudio\"}\n      </p>\n      <p className={trackState.video ? \"on\" : \"\"}\n        onClick={() => mute(\"video\")}>\n        {trackState.video ? \"MuteVideo\" : \"UnmuteVideo\"}\n      </p>\n      {<p onClick={() => leaveChannel()}>Leave</p>}\n    </div>\n  );\n};\n\nconst ChannelForm = (props: {\n  setInCall: React.Dispatch<React.SetStateAction<boolean>>;\n  setChannelName: React.Dispatch<React.SetStateAction<string>>;\n}) => {\n  const { setInCall, setChannelName } = props;\n\n  return (\n    <form className=\"join\">\n      {appId === '' && <p style={{color: 'red'}}>Please enter your Agora App ID in App.tsx and refresh the page</p>}\n      <input type=\"text\"\n        placeholder=\"Enter Channel Name\"\n        onChange={(e) => setChannelName(e.target.value)}\n      />\n      <button onClick={(e) => {\n        e.preventDefault();\n        setInCall(true);\n      }}>\n        Join\n      </button>\n    </form>\n  );\n};\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}